#+TITLE: GNU Emacs Configuration
#+AUTHOR: Harish Narayanan
#+LANGUAGE: en
#+OPTIONS: toc:nil author:nil date:nil html-postamble:nil

I've always had a natural affinity for the native text-editing
interface in [[https://www.gnu.org/software/emacs/][Emacs]]. The shortcuts (called key-bindings in Emacs
terminology) and mnemonic patterns make intuitive sense to me. So for
nearly 2.5 decades, I happily used Emacs as "just a text editor."

In late 2023, I decided to immerse myself in the world of [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Emacs Lisp]].
This really wasn't driven by any specific goal; it was simply me
encouraging my curiosity. It was around this time that it hit me:

Emacs is not a text editor, it's a tool construction kit that lets you
build any text-based tool you want. /It is the embodiment of a
philosophy of user empowerment./

As I've begun to explore the implications of this idea, my Emacs
configuration has evolved significantly. It's no longer limited to a
handful of snippets I've cribbed from the internet. It now involves
multiple packages, relies on [[https://melpa.org][a package repository]], leans into powerful
systems built upon Emacs (like [[https://orgmode.org][Org Mode]] and [[https://magit.vc][Magit]]), and most
importantly, adapts Emacs to be exactly what I need it to be.

This file gathers all these ideas in one place, and it aims to be two
things simultaneously:

- Literature that is readable and understandable for humans.
- A resource that can be directly exported (=C-c C-v t= in Org Mode)
  to my actual Emacs configuration files.

The structure of this file was inspired by [[https://protesilaos.com/emacs/dotemacs][a much richer variant by
Prot]].

[[mailto:mail@harishnarayanan.org][Please write to me]] if you need any help with how it's used, or if
you'd like to suggest any improvements.

#+toc: headlines 2

* Early Initialisation

There are some things (mostly pertinent to the base UI) that need to
be set really early in Emacs' startup. This is so that the UI doesn't
first show up uncustomised, and then /flash/ as it redraws based on any
later UI customisation (such as a change of theme).

This early initialisation configuration goes into a handily-named file
called =early-init.el=.

** Start with a clean slate

Depending on your system, there might be some default configuration
shared by other Emacs users in a file called =default.el=. To ensure
our Emacs behaves consistently everywhere, we ignore this and start
from a blank slate.

#+BEGIN_SRC emacs-lisp :tangle "early-init.el"
(setq inhibit-default-init t)
#+END_SRC

** Remove unused GUI elements

There are a few elements like a graphical menu and a scroll-bar that
are useful for beginners when first getting acquainted with Emacs. But
as you get more experienced navigating the app with a keyboard, they
get less useful. As a more advanced user, I remove them from the UI to
let me focus more on the content.

#+BEGIN_SRC emacs-lisp :tangle "early-init.el"
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

In the snippet above, =-1= is convention for disabling the
corresponding mode.

** Set the initial background colour to match my theme

Emacs tends to start with a default (white) colour when first loaded,
which is then refreshed later as a custom theme is loaded. We avoid
this by hard-coding the background colour to the same value as a known
custom theme. (I do not know how to make it dynamic for now, but this
is not a problem as I rarely change my base theme.)

#+BEGIN_SRC emacs-lisp :tangle "early-init.el"
(when (display-graphic-p)
  (setq default-frame-alist
        ;; bg-main from the modus-vivendi-tinted theme is hard-coded below
        (append default-frame-alist '((background-color . "#0d0e1c")))))
#+END_SRC

Here, =default-frame-alist= is a list of key-value pairs that help set
attributes for newly created frames (what you'd call a window). We're
extending the default by this background colour.

** Set default locale

To ensure consistency across environments, we force a basic
English/ASCII locale setting. This affects how Emacs handles various
locale-dependent operations like sorting, string comparisons, and
character encoding.

#+BEGIN_SRC emacs-lisp :tangle "early-init.el"
(setenv "LC_ALL" "C")
#+END_SRC

* OS-Specific Customisation

I generally use Emacs on macOS, and this needs me to tweak it a tiny
bit to my liking.

** Resolve native compilation issues on macOS Sequoia

To be as fast as possible, modern Emacs /byte compiles/ Emacs Lisp
code into an efficient format for use at runtime. For some reason, on
my Mac, Emacs fails to fully understand where GCC is installed, and
then complains that it cannot find =libgccjit.so= very many times when
installing packages.

No matter, we help it along by explicitly telling it where to look.

#+BEGIN_SRC emacs-lisp :tangle "early-init.el"
(when (eq system-type 'darwin)
  (setq exec-path (append '("/opt/local/bin") exec-path))
  (setenv "PATH" (concat "/opt/local/bin:" (getenv "PATH"))))
#+END_SRC

The paths above are hard-coded for [[https://www.macports.org][MacPorts]] and you can tweak them for
your system if it's different.

** Set the Command key to function as the Meta key on macOS

Emacs has two primary modifier keys, the Control key (=C=) and the
Meta key (=M=). =M= is traditionally mapped to =Alt= on most
keyboards, but on a Mac, =Command= is so much more comfortable.

#+BEGIN_SRC emacs-lisp :tangle "early-init.el"
(when (eq system-type 'darwin)
  (setq mac-command-modifier 'meta
        mac-option-modifier 'none))
#+END_SRC

** Reduce window decoration on macOS

These settings make Emacs' titlebar blend more seamlessly with the
dark theme. Enforcing night mode ensures that title is in a colour
that is visible against the dark titlebar.

#+BEGIN_SRC emacs-lisp :tangle "early-init.el"
(when (eq system-type 'darwin)
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark)))
#+END_SRC

* Core settings
** Store settings from the GUI =customize= interface into a separate file

In addition to being configured with the source code in this file,
Emacs can also be configured using a graphical interface (=M-x
customize=). When using this GUI, the standard behaviour is to persist
these settings directly by editing the default Emacs config file.

The following configuration puts this into its own file, so we can
clearly separate these two concepts.

#+BEGIN_SRC emacs-lisp :tangle "init.el"
(setq custom-file (locate-user-emacs-file "custom.el"))
(load custom-file :no-error-if-file-is-missing)
#+END_SRC

* Startup UI

I like seeing the current buffer name and the machine I'm on right in
the title bar, so I donâ€™t lose track when I have multiple frames or
hosts open.

#+BEGIN_SRC emacs-lisp :tangle "init.el"
(setq frame-title-format
      (concat  "%b - emacs@" (system-name)))
#+END_SRC

I prefer a relatively clean and empty state as I start, so the
following removes a startup splash screen and brings up an empty plain
text buffer, so I can start typing immediately.

#+BEGIN_SRC emacs-lisp :tangle "init.el"
(setq inhibit-startup-screen t)
(setq initial-scratch-message "")
(setq initial-major-mode 'text-mode)
(setq default-major-mode 'text-mode)
#+END_SRC

* TODO To Classify

What follows is simply the remainder of my existing configuration. I
will break it out into sections and document it better in time.

#+BEGIN_SRC emacs-lisp :tangle "init.el"
;; copy selected text
(setq-default mouse-drag-copy-region t)

;; enable column number mode
(setq-default column-number-mode t)

;; enable visual feedback on selections
(setq-default transient-mark-mode t)

;; show the boundaries of the file
(setq-default indicate-buffer-boundaries 'right)

;; split buffers horizontally when opening multiple files
;; (setq-default split-width-threshold 0)

;; don't require two spaces after full stops to define sentences
(setq-default sentence-end-double-space nil)

;; show trailing spaces and empty lines
(setq-default show-trailing-whitespace t)
(setq-default indicate-empty-lines t)

;; enable up- and down-casing
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)

;; prevent extraneous tabs and use 2 spaces
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)

;; highlight matching pairs of parentheses
(setq-default show-paren-delay 0)
(show-paren-mode t)

;; delete selection when beginning to type
(delete-selection-mode t)

;; set default indentation for different languages
(setq c-default-style "bsd"
      c-basic-offset 2)
(setq sgml-basic-offset 2)

;; turn on interactive do
(ido-mode t)
(setq-default ido-enable-flex-matching t)
(setq-default ido-everywhere t)

;; enable flyspell-mode with an appropriate dictionary
(add-hook 'text-mode-hook 'flyspell-mode)
(setq ispell-dictionary "british")

;; setup ediff to have a neater layout
(setq ediff-split-window-function 'split-window-horizontally)
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC

* External package repository

In addition to the packages that come built-in with Emacs, there is a
lot out there that can add to its functionality. We turn to a popular,
community-driven package repository called [[https://melpa.org/][Melpa]] to access this
goodness.

#+BEGIN_SRC emacs-lisp :tangle "init.el"
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
#+END_SRC

* TODO To Classify

What follows is simply the remainder of my existing configuration. I
will break it out into sections and document it better in time.

#+BEGIN_SRC emacs-lisp :tangle "init.el"
;; configure useful packages with use-package
(use-package magit :ensure t)
(use-package unfill :ensure t)
(use-package smex :ensure t)
(use-package go-mode :ensure t)
(use-package julia-mode :ensure t)
(use-package php-mode :ensure t)
(use-package markdown-mode :ensure t)
(use-package yaml-mode :ensure t)
(use-package graphviz-dot-mode :ensure t)

(use-package tex
  :ensure auctex)

(use-package geiser
  :ensure t
  :config
  (setenv "DISPLAY" ":0")
  (setq geiser-active-implementations '(mit guile))
  (add-hook 'geiser-repl-mode-hook 'hn/disable-trailing-whitespace-and-empty-lines))

(use-package geiser-guile
  :ensure t
  :config
  (setq geiser-guile-binary "/opt/local/bin/guile"))

(use-package geiser-mit
  :ensure t
  :config
  (setenv "MITSCHEME_HEAP_SIZE" "100000")
  (setenv "MITSCHEME_LIBRARY_PATH" "/Users/harish/Applications/mit-scheme/lib/mit-scheme-svm1-64le-12.1")
  (setenv "MITSCHEME_BAND" "mechanics.com")
  (setq geiser-mit-binary "/Users/harish/Applications/mit-scheme/bin/mit-scheme"))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((scheme . t)))

(defun hn/org-confirm-babel-evaluate (lang body)
  (not (string= lang "scheme")))
(setq org-confirm-babel-evaluate #'hn/org-confirm-babel-evaluate)

(defun theme-custom-faces ()
  (modus-themes-with-colors
    (custom-set-faces
     ;; Add "padding" to the mode lines
     `(mode-line ((,c :box (:line-width 3 :color ,bg-mode-line-active))))
     `(mode-line-inactive ((,c :box (:line-width 3 :color ,bg-mode-line-inactive)))))))

(use-package modus-themes
  :ensure t
  :config

  (setq modus-themes-to-toggle '(modus-operandi-tinted modus-vivendi-tinted)
        modus-themes-bold-constructs t
        modus-themes-italic-constructs t
        modus-themes-org-blocks 'gray-background)

  (setq modus-themes-common-palette-overrides
        '((bg-mode-line-active bg-blue-subtle)
          (fg-mode-line-active fg-main)
          (border-mode-line-active bg-blue-subtle)))

  (modus-themes-load-theme 'modus-vivendi-tinted)

  (define-key global-map (kbd "<f5>") #'modus-themes-toggle))

(add-hook 'modus-themes-after-load-theme-hook #'theme-custom-faces)

(setq org-edit-src-content-indentation 0)
(global-set-key (kbd "C-c a") 'org-agenda)
;; consider https://github.com/minad/org-modern
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
(setq org-agenda-files '("~/Notes/todo.org"))

(setq org-export-with-smart-quotes t)

;; setup corfu
(use-package corfu
  :ensure t
  :custom
  (corfu-cycle t)
  (corfu-separator ?\s)
  (corfu-scroll-margin 5)
  :init
  (global-corfu-mode))

(use-package emacs
  :init
  (setq completion-cycle-threshold 3)
  (setq tab-always-indent 'complete))

;; setup tree-sitter
(use-package tree-sitter
  :ensure t
  :config
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

(use-package tree-sitter-langs
  :ensure t
  :after tree-sitter)

;; configure a development environment for python
(use-package python
  :ensure t
  :hook ((python-mode . eglot-ensure)
         (python-mode . tree-sitter-hl-mode)))

;; (use-package mastodon
;;   :ensure t
;;   :config
;;   (setq mastodon-instance-url "https://hachyderm.io/"
;;         mastodon-active-user "harish")
;;   )

(use-package gptel
  :ensure t
  )

;; (add-hook 'after-init-hook 'global-company-mode)

;; enable smex
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

;; turn on auto-fill mode for LaTeX files
(add-hook 'tex-mode-hook 'turn-on-auto-fill t)

;; turn on YAML mode for YAML files
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))

;; turn on octave mode for M files
(add-to-list 'auto-mode-alist '("\\.m\\'" . octave-mode))
#+END_SRC

* TODO Things to try

** Better C-g behaviour

#+BEGIN_SRC emacs-lisp
(defun prot/keyboard-quit-dwim ()
  "Do-What-I-Mean behaviour for a general `keyboard-quit'.

The generic `keyboard-quit' does not do the expected thing when
the minibuffer is open.  Whereas we want it to close the
minibuffer, even without explicitly focusing it.

The DWIM behaviour of this command is as follows:

- When the region is active, disable it.
- When a minibuffer is open, but not focused, close the minibuffer.
- When the Completions buffer is selected, close it.
- In every other case use the regular `keyboard-quit'."
  (interactive)
  (cond
   ((region-active-p)
    (keyboard-quit))
   ((derived-mode-p 'completion-list-mode)
    (delete-completion-window))
   ((> (minibuffer-depth) 0)
    (abort-recursive-edit))
   (t
    (keyboard-quit))))

(define-key global-map (kbd "C-g") #'prot/keyboard-quit-dwim)
#+END_SRC

** Package management

- =straight= integrates well with =use-package= and replaces the
  internal packaging system.

** Universal treesitter

- =treesit-auto= is the easiest way of enabling it for all languages.

** Improving the minibuffer

The minibuffer is the small interface at the bottom of the Emacs
window where you can enter commands, input parameters, see results of
these commands and so on. The [[https://protesilaos.com/codelog/2024-02-17-emacs-modern-minibuffer-packages/][internet suggests that]] with the
following packages, it will be much more functional.

- vertico
- orderless
- marginalia
- consult
- embark
- embark-consult
- wgrep
- savehist
- recentf

At the moment I only use interactive-do, which is awesome but also
like 90 years old.

** Improving the buffer

Completions and such in the buffer can be improved and customised.

- pixel-scroll-precision-mode
- corfu
- orderless
- cape
- eglot

** Other things

- python
- go
- scheme/lisp - something
- html
- css
- js
- markdown
- latex - auctex

* TODO Possible outline

Core settings and early initialisation
Fetch necessary packages
Broad UI customisation

* My custom functions

These are specific to my needs, and are likely not useful for other
people. They are prefixed with my initials, =hn/=.

#+BEGIN_SRC emacs-lisp :tangle "init.el"
(defun hn/journal-todo (start-date end-date &optional prefix)
  "Generate a todo list for journal entries from START-DATE to END-DATE with an optional PREFIX."
  (interactive
   (list
    (read-string "Enter start date (YYYY-MM-DD): ")
    (read-string "Enter end date (YYYY-MM-DD): ")
    (read-string "Enter prefix: " "Write a journal entry for ")))
  (let* ((start-time (date-to-time start-date))
         (end-time (date-to-time end-date))
         (one-day (seconds-to-time 86400)) ; 24 hours * 60 minutes * 60 seconds
         (current-time start-time))
    (while (time-less-p current-time (time-add end-time one-day))
      (let ((entry-date (format-time-string "%A %d-%m-%Y" current-time)))
        (insert (format "%s%s\n" (or prefix "** Write entry for ") entry-date)))
      (setq current-time (time-add current-time one-day)))))

(defun hn/disable-trailing-whitespace-and-empty-lines ()
  "Disable showing trailing whitespace and indicating empty lines in the current buffer."
  (setq-local show-trailing-whitespace nil)
  (setq-local indicate-empty-lines nil))
#+END_SRC
